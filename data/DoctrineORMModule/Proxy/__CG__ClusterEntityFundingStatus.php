<?php

namespace DoctrineORMModule\Proxy\__CG__\Cluster\Entity\Funding;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Status extends \Cluster\Entity\Funding\Status implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'id', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'code', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'status', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'color', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'statusFunding', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'isEvaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'statusEvaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'sequence', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'evaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'funding'];
        }

        return ['__isInitialized__', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'id', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'code', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'status', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'color', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'statusFunding', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'isEvaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'statusEvaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'sequence', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'evaluation', '' . "\0" . 'Cluster\\Entity\\Funding\\Status' . "\0" . 'funding'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Status $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function parseStyle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'parseStyle', []);

        return parent::parseStyle();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(?int $id): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(string $code): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(string $status): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor(string $color): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusFunding(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusFunding', []);

        return parent::getStatusFunding();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusFunding(string $statusFunding): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusFunding', [$statusFunding]);

        return parent::setStatusFunding($statusFunding);
    }

    /**
     * {@inheritDoc}
     */
    public function isEvaluation(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEvaluation', []);

        return parent::isEvaluation();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEvaluation(bool $isEvaluation): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEvaluation', [$isEvaluation]);

        return parent::setIsEvaluation($isEvaluation);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusEvaluation(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusEvaluation', []);

        return parent::getStatusEvaluation();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusEvaluation(?string $statusEvaluation): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusEvaluation', [$statusEvaluation]);

        return parent::setStatusEvaluation($statusEvaluation);
    }

    /**
     * {@inheritDoc}
     */
    public function getSequence(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSequence', []);

        return parent::getSequence();
    }

    /**
     * {@inheritDoc}
     */
    public function setSequence(int $sequence): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSequence', [$sequence]);

        return parent::setSequence($sequence);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvaluation(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvaluation', []);

        return parent::getEvaluation();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvaluation(\Doctrine\Common\Collections\Collection $evaluation): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvaluation', [$evaluation]);

        return parent::setEvaluation($evaluation);
    }

    /**
     * {@inheritDoc}
     */
    public function getFunding(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFunding', []);

        return parent::getFunding();
    }

    /**
     * {@inheritDoc}
     */
    public function setFunding(\Doctrine\Common\Collections\Collection $funding): \Cluster\Entity\Funding\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFunding', [$funding]);

        return parent::setFunding($funding);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

    /**
     * {@inheritDoc}
     */
    public function get(string $switch): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get', [$switch]);

        return parent::get($switch);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function has(string $prop): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'has', [$prop]);

        return parent::has($prop);
    }

}
