<?php

namespace DoctrineORMModule\Proxy\__CG__\Reporting\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StorageLocation extends \Reporting\Entity\StorageLocation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'id', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'name', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'connectionString', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'container', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'excelFolder', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'parquetFolder', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'oAuth2Service'];
        }

        return ['__isInitialized__', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'id', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'name', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'connectionString', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'container', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'excelFolder', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'parquetFolder', '' . "\0" . 'Reporting\\Entity\\StorageLocation' . "\0" . 'oAuth2Service'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StorageLocation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function hasOAuth2Service(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOAuth2Service', []);

        return parent::hasOAuth2Service();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(?int $id): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getConnectionString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnectionString', []);

        return parent::getConnectionString();
    }

    /**
     * {@inheritDoc}
     */
    public function setConnectionString(string $connectionString): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConnectionString', [$connectionString]);

        return parent::setConnectionString($connectionString);
    }

    /**
     * {@inheritDoc}
     */
    public function getExcelFolder(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExcelFolder', []);

        return parent::getExcelFolder();
    }

    /**
     * {@inheritDoc}
     */
    public function setExcelFolder(string $excelFolder): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExcelFolder', [$excelFolder]);

        return parent::setExcelFolder($excelFolder);
    }

    /**
     * {@inheritDoc}
     */
    public function getParquetFolder(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParquetFolder', []);

        return parent::getParquetFolder();
    }

    /**
     * {@inheritDoc}
     */
    public function setParquetFolder(string $parquetFolder): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParquetFolder', [$parquetFolder]);

        return parent::setParquetFolder($parquetFolder);
    }

    /**
     * {@inheritDoc}
     */
    public function getOAuth2Service(): ?\Api\Entity\OAuth\Service
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOAuth2Service', []);

        return parent::getOAuth2Service();
    }

    /**
     * {@inheritDoc}
     */
    public function setOAuth2Service(?\Api\Entity\OAuth\Service $oAuth2Service): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOAuth2Service', [$oAuth2Service]);

        return parent::setOAuth2Service($oAuth2Service);
    }

    /**
     * {@inheritDoc}
     */
    public function getContainer(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContainer', []);

        return parent::getContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setContainer(string $container): \Reporting\Entity\StorageLocation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContainer', [$container]);

        return parent::setContainer($container);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

    /**
     * {@inheritDoc}
     */
    public function get(string $switch): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get', [$switch]);

        return parent::get($switch);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function has(string $prop): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'has', [$prop]);

        return parent::has($prop);
    }

}
