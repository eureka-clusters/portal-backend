<?php

namespace DoctrineORMModule\Proxy\__CG__\Admin\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Queue extends \Admin\Entity\Queue implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'id', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'queue', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'data', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'status', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'created', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'scheduled', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'executed', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'finished', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'priority', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'message', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'trace'];
        }

        return ['__isInitialized__', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'id', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'queue', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'data', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'status', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'created', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'scheduled', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'executed', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'finished', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'priority', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'message', '' . "\0" . 'Admin\\Entity\\Queue' . "\0" . 'trace'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Queue $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(?int $id): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getQueue(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueue', []);

        return parent::getQueue();
    }

    /**
     * {@inheritDoc}
     */
    public function setQueue(?string $queue): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQueue', [$queue]);

        return parent::setQueue($queue);
    }

    /**
     * {@inheritDoc}
     */
    public function getData(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function setData(?string $data): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(?int $status): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusText(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusText', []);

        return parent::getStatusText();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(?\DateTime $created): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getScheduled(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScheduled', []);

        return parent::getScheduled();
    }

    /**
     * {@inheritDoc}
     */
    public function setScheduled(?\DateTime $scheduled): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScheduled', [$scheduled]);

        return parent::setScheduled($scheduled);
    }

    /**
     * {@inheritDoc}
     */
    public function getExecuted(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExecuted', []);

        return parent::getExecuted();
    }

    /**
     * {@inheritDoc}
     */
    public function setExecuted(?\DateTime $executed): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExecuted', [$executed]);

        return parent::setExecuted($executed);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinished(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinished', []);

        return parent::getFinished();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinished(?\DateTime $finished): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinished', [$finished]);

        return parent::setFinished($finished);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', []);

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority(?int $priority): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', [$priority]);

        return parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage(?string $message): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', [$message]);

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrace(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrace', []);

        return parent::getTrace();
    }

    /**
     * {@inheritDoc}
     */
    public function setTrace(?string $trace): \Admin\Entity\Queue
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrace', [$trace]);

        return parent::setTrace($trace);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

    /**
     * {@inheritDoc}
     */
    public function get(string $switch): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get', [$switch]);

        return parent::get($switch);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function has(string $prop): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'has', [$prop]);

        return parent::has($prop);
    }

}
