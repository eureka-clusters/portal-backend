<?php

namespace DoctrineORMModule\Proxy\__CG__\Cluster\Entity\Project;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Version extends \Cluster\Entity\Project\Version implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'id', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'project', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'type', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'costsAndEffort', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'submissionDate', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'status', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'effort', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'costs', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'countries'];
        }

        return ['__isInitialized__', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'id', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'project', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'type', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'costsAndEffort', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'submissionDate', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'status', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'effort', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'costs', '' . "\0" . 'Cluster\\Entity\\Project\\Version' . "\0" . 'countries'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Version $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getProject(): \Cluster\Entity\Project
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProject', []);

        return parent::getProject();
    }

    /**
     * {@inheritDoc}
     */
    public function setProject(\Cluster\Entity\Project $project): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProject', [$project]);

        return parent::setProject($project);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): \Cluster\Entity\Version\Type
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\Cluster\Entity\Version\Type $type): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostsAndEffort(): \Doctrine\Common\Collections\ArrayCollection|\Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostsAndEffort', []);

        return parent::getCostsAndEffort();
    }

    /**
     * {@inheritDoc}
     */
    public function setCostsAndEffort(\Doctrine\Common\Collections\ArrayCollection|\Doctrine\Common\Collections\Collection $costsAndEffort): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCostsAndEffort', [$costsAndEffort]);

        return parent::setCostsAndEffort($costsAndEffort);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmissionDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmissionDate', []);

        return parent::getSubmissionDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubmissionDate(\DateTime $submissionDate): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubmissionDate', [$submissionDate]);

        return parent::setSubmissionDate($submissionDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): \Cluster\Entity\Version\Status
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Cluster\Entity\Version\Status $status): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getEffort(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEffort', []);

        return parent::getEffort();
    }

    /**
     * {@inheritDoc}
     */
    public function setEffort(float $effort): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEffort', [$effort]);

        return parent::setEffort($effort);
    }

    /**
     * {@inheritDoc}
     */
    public function getCosts(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCosts', []);

        return parent::getCosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setCosts(float $costs): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCosts', [$costs]);

        return parent::setCosts($costs);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountries(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountries', []);

        return parent::getCountries();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountries(array $countries): \Cluster\Entity\Project\Version
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountries', [$countries]);

        return parent::setCountries($countries);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

    /**
     * {@inheritDoc}
     */
    public function get(string $switch): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get', [$switch]);

        return parent::get($switch);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function has(string $prop): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'has', [$prop]);

        return parent::has($prop);
    }

}
